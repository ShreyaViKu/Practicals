MIDS 2
# Import Required Libraries
import pandas as pd
import numpy as np
import re
import string
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# For uploading CSV file manually
from google.colab import files
uploaded = files.upload()

# Replace with the actual filename after upload
filename = list(uploaded.keys())[0]
df = pd.read_csv(filename)

#  Preview Dataset
print(" Dataset Preview:\n", df.head())
print("\n Column Names:\n", df.columns)

#  Check and Drop Missing Values in required columns
df.dropna(subset=["post_text", "label"], inplace=True)

#  Clean the text in 'post_text' column
def clean_text(text):
    text = re.sub(r"http\S+", "", text)             # Remove URLs
    text = re.sub(r"@\w+", "", text)                # Remove Mentions
    text = re.sub(r"#\w+", "", text)                # Remove Hashtags
    text = re.sub(r"\d+", "", text)                 # Remove Digits
    text = text.translate(str.maketrans('', '', string.punctuation))  # Remove Punctuation
    return text.lower().strip()

# Apply cleaning
df["clean_text"] = df["post_text"].apply(clean_text)

#  Convert Text to Features using TF-IDF
vectorizer = TfidfVectorizer(stop_words='english', max_features=3000)
X = vectorizer.fit_transform(df["clean_text"])

#  Set Target Variable
y = df["label"]

#  Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

#  KNN Classifier Training
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

#  Prediction
y_pred = knn.predict(X_test)

#  Evaluation
print(f"\n Model Accuracy: {accuracy_score(y_test, y_pred) * 100:.2f}%")
print("\n Classification Report:\n", classification_report(y_test, y_pred))

#  Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="YlGnBu",
            xticklabels=knn.classes_, yticklabels=knn.classes_)
plt.title(" Confusion Matrix")
plt.xlabel("Predicted Label")
plt.ylabel("Actual Label")
plt.show()


