import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load the Iris dataset (150 samples, 4 features, 3 classes)
iris = datasets.load_iris()
X = iris.data[:, [0, 2]]  # Select sepal length and petal length for 2D plot
y = iris.target

# We'll only use class 0 (Setosa) and class 1 (Versicolor) for binary classification
X = X[y != 2]
y = y[y != 2]

# Convert class labels: 0 -> -1, 1 -> 1 (required for perceptron learning rule)
y = np.where(y == 0, -1, 1)

# Standardize the feature values (important for faster convergence)
sc = StandardScaler()
X = sc.fit_transform(X)

# Split into training and testing data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the Perceptron class
class Perceptron:
    def __init__(self, learning_rate=0.01, epochs=10):
        self.learning_rate = learning_rate
        self.epochs = epochs

    def fit(self, X, y):
        self.weights = np.zeros(X.shape[1])  # Initialize weights to zero
        self.bias = 0  # Initialize bias to zero
        self.errors = []  # Track misclassifications per epoch

        for _ in range(self.epochs):
            error_count = 0
            for xi, target in zip(X, y):
                prediction = self.predict(xi)
                update = self.learning_rate * (target - prediction)
                self.weights += update * xi
                self.bias += update
                error_count += int(update != 0.0)
            self.errors.append(error_count)

    def net_input(self, X):
        return np.dot(X, self.weights) + self.bias

    def predict(self, X):
        return np.where(self.net_input(X) >= 0.0, 1, -1)

# Train the perceptron
model = Perceptron(learning_rate=0.1, epochs=10)
model.fit(X_train, y_train)

# Function to plot the decision boundary
def plot_decision_boundary(X, y, classifier, title):
    plt.figure(figsize=(8, 6))

    # Create meshgrid for plotting decision surface
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx1, xx2 = np.meshgrid(np.arange(x_min, x_max, 0.01),
                           np.arange(y_min, y_max, 0.01))
    
    # Predict for each point in meshgrid
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)

    # Plot decision boundary
    plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=plt.cm.coolwarm)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())

    # Plot data points
    for idx, cl in enumerate(np.unique(y)):
        plt.scatter(X[y == cl, 0], X[y == cl, 1],
                    c=['red', 'blue'][idx], marker='o', label=f"Class {cl}", edgecolor='black')

    plt.xlabel('Sepal Length (standardized)')
    plt.ylabel('Petal Length (standardized)')
    plt.title(title)
    plt.legend()
    plt.grid(True)
    plt.show()

# Plot decision boundary
plot_decision_boundary(X_train, y_train, model, "Perceptron Decision Boundary on Iris Data")

# Plot number of errors per epoch
plt.figure(figsize=(6, 4))
plt.plot(range(1, len(model.errors) + 1), model.errors, marker='o')
plt.xlabel('Epochs')
plt.ylabel('Number of updates (errors)')
plt.title('Perceptron Learning Curve')
plt.grid(True)
plt.show()
